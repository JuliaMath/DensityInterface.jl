var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Interface","page":"API","title":"Interface","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"hasdensity\nlogdensityof\nlogdensityof(::Any)\nlogfuncdensity\ndensityof\ndensityof(::Any)","category":"page"},{"location":"api/#DensityInterface.hasdensity","page":"API","title":"DensityInterface.hasdensity","text":"hasdensity(d)::Bool\n\nReturn true if d is compatible with the DensityInterface interface.\n\nhasdensity(d) == true implies that d is either a density itself or has an associated density, e.g. a probability density function or a Radon–Nikodym derivative with respect to an implicit base measure. It also implies that the value of that density at given points can be calculated via logdensityof and densityof. ```\n\n\n\n\n\n","category":"function"},{"location":"api/#DensityInterface.logdensityof","page":"API","title":"DensityInterface.logdensityof","text":"logdensityof(d, x)::Real\n\nCompute the logarithmic value of density d or it's associated density at a given point x.\n\njulia> hasdensity(d)\ntrue\n\njulia> logy = logdensityof(d, x); logy isa Real\ntrue\n\nSee also hasdensity and densityof.\n\n\n\n\n\n","category":"function"},{"location":"api/#DensityInterface.logdensityof-Tuple{Any}","page":"API","title":"DensityInterface.logdensityof","text":"logdensityof(d)\n\nReturn a function that computes the logarithmic value of density d or its associated density at a given point.\n\njulia> log_f = logdensityof(d); log_f isa Function\ntrue\n\njulia> log_f(x) == logdensityof(d, x)\ntrue\n\nlogdensityof(d) defaults to Base.Fix1(logdensityof, d), but may be specialized. If so, logfuncdensity will typically have to be specialized for the return type of logdensityof as well.\n\nlogfuncdensity is the inverse of logdensityof, so logfuncdensity(log_f) must be equivalent to d.\n\n\n\n\n\n","category":"method"},{"location":"api/#DensityInterface.logfuncdensity","page":"API","title":"DensityInterface.logfuncdensity","text":"logfuncdensity(log_f)\n\nReturn a DensityInterface-compatible density that is defined by a given log-density function log_f:\n\njulia> d = logfuncdensity(log_f);\n\njulia> hasdensity(d) == true\ntrue\n\njulia> logdensityof(d, x) == log_f(x)\ntrue\n\nlogfuncdensity(log_f) returns an instance of DensityInterface.LogFuncDensity by default, but may be specialized to return something else depending on the type of log_f). If so, logdensityof will typically have to be specialized for the return type of logfuncdensity as well.\n\nlogfuncdensity is the inverse of logdensityof, so the following must hold true:\n\nlogfuncdensity(logdensityof(d)) is equivalent to d\nlogdensityof(logfuncdensity(log_f)) is equivalent to log_f.\n\nSee also hasdensity.\n\n\n\n\n\n","category":"function"},{"location":"api/#DensityInterface.densityof","page":"API","title":"DensityInterface.densityof","text":"densityof(d, x)::Real\n\nCompute the value of density d or its associated density at a given point x.\n\njulia> hasdensity(d)\ntrue\n\njulia> densityof(d, x) == exp(logdensityof(d, x))\ntrue\n\ndensityof(d, x) defaults to exp(logdensityof(d, x)), but may be specialized.\n\nSee also hasdensity and logdensityof.\n\n\n\n\n\ndensityof(d)\n\nReturn a function that computes the value of density d or its associated density at a given point.\n\njulia> f = densityof(d);\n\njulia> f(x) == densityof(d, x)\ntrue\n\ndensityof(d) defaults to Base.Fix1(densityof, d), but may be specialized.\n\n\n\n\n\n","category":"function"},{"location":"api/#DensityInterface.densityof-Tuple{Any}","page":"API","title":"DensityInterface.densityof","text":"densityof(d)\n\nReturn a function that computes the value of density d or its associated density at a given point.\n\njulia> f = densityof(d);\n\njulia> f(x) == densityof(d, x)\ntrue\n\ndensityof(d) defaults to Base.Fix1(densityof, d), but may be specialized.\n\n\n\n\n\n","category":"method"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"DensityInterface.LogFuncDensity","category":"page"},{"location":"api/#DensityInterface.LogFuncDensity","page":"API","title":"DensityInterface.LogFuncDensity","text":"struct DensityInterface.LogFuncDensity{F}\n\nWraps a log-density function log_f to make it compatible with DensityInterface interface. Typically, LogFuncDensity(log_f) should not be called directly, logfuncdensity should be used instead.\n\n\n\n\n\n","category":"type"},{"location":"api/#Test-utility","page":"API","title":"Test utility","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"DensityInterface.test_density_interface","category":"page"},{"location":"api/#DensityInterface.test_density_interface","page":"API","title":"DensityInterface.test_density_interface","text":"DensityInterface.test_density_interface(d, x, ref_logd_at_x; kwargs...)\n\nTest if d is compatible with DensityInterface.\n\nTests that logdensityof(d, x) equals ref_logd_at_x and that the behavior of logdensityof(d), densityof(d, x) and densityof(d) is consistent.\n\nAlso tests if logfuncdensity(logdensityof(d)) returns a density equivalent to d in respect to the functions above.\n\nThe results of logdensityof(d, x) and densityof(d, x) are compared to ref_logd_at_x and exp(ref_logd_at_x) using isapprox. kwargs... are forwarded to isapprox.\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#DensityInterface.jl","page":"Home","title":"DensityInterface.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    struct SomeDensity end\n    log_of_d_at(x) = x^2\n    x = 4\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"DensityInterface","category":"page"},{"location":"#DensityInterface","page":"Home","title":"DensityInterface","text":"DensityInterface\n\nTrait-based interface for mathematical/statistical densities\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"This package defines an interface for mathematical/statistical densities and objects associated with a density in Julia. The interface comprises the functions hasdensity,  logdensityof/densityof[1] and logfuncdensity.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following methods must be provided to make a type (e.g. SomeDensity) compatible with the interface:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import DensityInterface\n\nDensityInterface.hasdensity(::SomeDensity) = true\nDensityInterface.logdensityof(d::SomeDensity, x) = log_of_d_at(x)\n\nDensityInterface.logdensityof(SomeDensity(), x) isa Real\n\n# output\n\ntrue","category":"page"},{"location":"","page":"Home","title":"Home","text":"The object d may be a density itself or something that can be said to have a density. If d is a distribution, the density is its probability density function. In the measure theoretical sense, the density function is the Radon–Nikodym derivative of d with respect to an implicit base measure. In statistical inference applications, for example, d might be a likelihood, prior or posterior[2].","category":"page"},{"location":"","page":"Home","title":"Home","text":"DensityInterface automatically provides logdensityof(d), equivalent to x -> logdensityof(d, x). This constitutes a convenient way of passing a (log-)density function to algorithms like optimizers, samplers, etc.:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DensityInterface\n\nd = SomeDensity()\nlog_f = logdensityof(d)\nlog_f(x) == logdensityof(d, x)\n\n# output\n\ntrue","category":"page"},{"location":"","page":"Home","title":"Home","text":"SomeOptimizerPackage.maximize(logdensityof(d), x_init)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Reversely, a given log-density function log_f can be converted to a DensityInterface-compatible density object using logfuncdensity:","category":"page"},{"location":"","page":"Home","title":"Home","text":"d = logfuncdensity(log_f)\nhasdensity(d) == true\nlogdensityof(d, x) == log_f(x)\n\n# output\n\ntrue","category":"page"},{"location":"","page":"Home","title":"Home","text":"[1]: The function names logdensityof and densityof were chosen to convey that the target object may either be a density or something that can be said to have a density. They also have less naming conflict potential than logdensity and esp. density (the latter already being exported by Plots.jl).","category":"page"},{"location":"","page":"Home","title":"Home","text":"[2]: The package MeasureTheory provides tools to work with densities and measures that go beyond the density in ","category":"page"},{"location":"","page":"Home","title":"Home","text":"respect to an implied base measure.","category":"page"}]
}

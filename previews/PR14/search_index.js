var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Interface","page":"API","title":"Interface","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"logdensityof\nlogdensityof(::Any)\nlogfuncdensity\nfuncdensity\ndensityof\ndensityof(::Any)","category":"page"},{"location":"api/#DensityInterface.logdensityof","page":"API","title":"DensityInterface.logdensityof","text":"logdensityof(object, x)::Real\n\nCompute the logarithmic value of the density object (resp. its associated density) at a given point x.\n\njulia> DensityKind(object)\nIsDensity()\n\njulia> logy = logdensityof(object, x); logy isa Real\ntrue\n\nSee also DensityKind and densityof.\n\n\n\n\n\n","category":"function"},{"location":"api/#DensityInterface.logdensityof-Tuple{Any}","page":"API","title":"DensityInterface.logdensityof","text":"logdensityof(object)\n\nReturn a function that computes the logarithmic value of the density object (resp. its associated density) at a given point.\n\njulia> log_f = logdensityof(object); log_f isa Function\ntrue\n\njulia> log_f(x) == logdensityof(object, x)\ntrue\n\nlogdensityof(object) defaults to Base.Fix1(logdensityof, object), but may be specialized. If so, logfuncdensity will typically have to be specialized for the return type of logdensityof as well.\n\nlogfuncdensity is the inverse of logdensityof, so logfuncdensity(log_f) must be equivalent to object.\n\n\n\n\n\n","category":"method"},{"location":"api/#DensityInterface.logfuncdensity","page":"API","title":"DensityInterface.logfuncdensity","text":"logfuncdensity(log_f)\n\nReturn a DensityInterface-compatible density that is defined by a given log-density function log_f:\n\njulia> object = logfuncdensity(log_f);\n\njulia> DensityKind(object)\nIsDensity()\n\njulia> logdensityof(object, x) == log_f(x)\ntrue\n\nlogfuncdensity(log_f) returns an instance of DensityInterface.LogFuncDensity by default, but may be specialized to return something else depending on the type of log_f). If so, logdensityof will typically have to be specialized for the return type of logfuncdensity as well.\n\nlogfuncdensity is the inverse of logdensityof, so the following must hold true:\n\nd = logfuncdensity(logdensityof(object)) is equivalent to object in respect to logdensityof and densityof. However, d may not be equal to object, especially if DensityKind(object) == HasDensity(): logfuncdensity always creates something that is density, never something that just has a density in some way (like a distribution or a measure in general).\nlogdensityof(logfuncdensity(log_f)) is equivalent (typically equal or even identical to) to log_f.\n\nSee also DensityKind.\n\n\n\n\n\n","category":"function"},{"location":"api/#DensityInterface.funcdensity","page":"API","title":"DensityInterface.funcdensity","text":"funcdensity(f)\n\nReturn a DensityInterface-compatible density that is defined by a given non-log density function f:\n\njulia> object = funcdensity(f);\n\njulia> DensityKind(object)\nIsDensity()\n\njulia> densityof(object, x) == f(x)\ntrue\n\nfuncdensity(f) returns an instance of DensityInterface.FuncDensity by default, but may be specialized to return something else depending on the type of f). If so, densityof will typically have to be specialized for the return type of funcdensity as well.\n\nfuncdensity is the inverse of densityof, so the following must hold true:\n\nd = funcdensity(densityof(object)) is equivalent to object in respect to logdensityof and densityof. However, d may not be equal to object, especially if DensityKind(object) == HasDensity(): funcdensity always creates something that is density, never something that just has a density in some way (like a distribution or a measure in general).\ndensityof(funcdensity(f)) is equivalent (typically equal or even identical to) to f.\n\nSee also DensityKind.\n\n\n\n\n\n","category":"function"},{"location":"api/#DensityInterface.densityof","page":"API","title":"DensityInterface.densityof","text":"densityof(object, x)::Real\n\nCompute the value of the density object (resp. its associated density) at a given point x.\n\njulia> DensityKind(object)\nIsDensity()\n\njulia> densityof(object, x) == exp(logdensityof(object, x))\ntrue\n\ndensityof(object, x) defaults to exp(logdensityof(object, x)), but may be specialized.\n\nSee also DensityKind and densityof.\n\n\n\n\n\ndensityof(object)\n\nReturn a function that computes the value of the density object (resp. its associated density) at a given point.\n\njulia> f = densityof(object);\n\njulia> f(x) == densityof(object, x)\ntrue\n\ndensityof(object) defaults to Base.Fix1(densityof, object), but may be specialized.\n\n\n\n\n\n","category":"function"},{"location":"api/#DensityInterface.densityof-Tuple{Any}","page":"API","title":"DensityInterface.densityof","text":"densityof(object)\n\nReturn a function that computes the value of the density object (resp. its associated density) at a given point.\n\njulia> f = densityof(object);\n\njulia> f(x) == densityof(object, x)\ntrue\n\ndensityof(object) defaults to Base.Fix1(densityof, object), but may be specialized.\n\n\n\n\n\n","category":"method"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"IsDensity\nHasDensity\nIsOrHasDensity\nNoDensity\nDensityKind\nDensityInterface.LogFuncDensity\nDensityInterface.FuncDensity\nDensityInterface.LikelihoodDensity","category":"page"},{"location":"api/#DensityInterface.IsDensity","page":"API","title":"DensityInterface.IsDensity","text":"struct IsDensity <: DensityKind end\n\nAs a return value of DensityKind(object), indicates that object is (represents) a density, like a probability density object.\n\nSee DensityKind for details.\n\n\n\n\n\n","category":"type"},{"location":"api/#DensityInterface.HasDensity","page":"API","title":"DensityInterface.HasDensity","text":"struct HasDensity <: DensityKind end\n\nAs a return value of DensityKind(object), indicates that object has a density, like a probability distribution has a probability density.\n\nSee DensityKind for details.\n\n\n\n\n\n","category":"type"},{"location":"api/#DensityInterface.IsOrHasDensity","page":"API","title":"DensityInterface.IsOrHasDensity","text":"IsOrHasDensity = Union{IsDensity, HasDensity}\n\nAs a return value of DensityKind(object), indicates that object either is or has a density, as understood by DensityInterface.\n\nSee DensityKind for details.\n\n\n\n\n\n","category":"type"},{"location":"api/#DensityInterface.NoDensity","page":"API","title":"DensityInterface.NoDensity","text":"struct NoDensity <: DensityKind end\n\nAs a return value of DensityKind(object), indicates that object is not and does not have a density, as understood by DensityInterface.\n\nSee DensityKind for details.\n\n\n\n\n\n","category":"type"},{"location":"api/#DensityInterface.DensityKind","page":"API","title":"DensityInterface.DensityKind","text":"abstract type DensityKind end\n\nDensityKind(object)\n\nSubtypes of DensityKind indicate if an object is a density or if it has a density, in the sense of the DensityInterface API, or if is not associated with a density (not compatible with DensityInterface).\n\nDensityKind(object) returns either IsDensity(), HasDensity() or NoDensity().\n\nIn addition to the subtypes IsDensity, HasDensity or NoDensity, a union IsOrHasDensity = Union{IsDensity, HasDensity} is defined for convenience.\n\nDensityKind(object) isa IsOrHasDensity implies that object is either a density itself or can be said to have an associated density. It also implies that the value of that density at given points can be calculated via logdensityof and densityof.\n\nDensityKind(object) defaults to NoDensity() (object is not and does not have a density). For a type that is (directly represents) a density, like a probability density, define\n\n@inline DensityKind(::MyDensityType) = IsDensity()\n\nFor a type that has (is associated with) a density in some way, like a probability distribution has a probability density, define\n\n@inline DensityKind(::MyDensityType) = HasDensity()\n\n\n\n\n\n","category":"type"},{"location":"api/#DensityInterface.LogFuncDensity","page":"API","title":"DensityInterface.LogFuncDensity","text":"struct DensityInterface.LogFuncDensity{F}\n\nWraps a log-density function log_f to make it compatible with DensityInterface interface. Typically, LogFuncDensity(log_f) should not be called directly, logfuncdensity should be used instead.\n\n\n\n\n\n","category":"type"},{"location":"api/#DensityInterface.FuncDensity","page":"API","title":"DensityInterface.FuncDensity","text":"struct DensityInterface.FuncDensity{F}\n\nWraps a non-log density function f to make it compatible with DensityInterface interface. Typically, FuncDensity(f) should not be called directly, funcdensity should be used instead.\n\n\n\n\n\n","category":"type"},{"location":"api/#DensityInterface.LikelihoodDensity","page":"API","title":"DensityInterface.LikelihoodDensity","text":"LikelihoodDensity{F,O}(f_kernel, obs)\n\nGiven a kernel function f_kernel that generates a distribution or measure in general\n\njulia> f_kernel(x) = Normal(x, 2.0);\n\njulia> DensityKind(f_kernel(x))\nHasDensity()\n\nand an observation obs of such a distribution/measure\n\njulia> obs = 1.5;\n\na LikelihoodDensity behaves in the following way\n\njulia> likelihood = LikelihoodDensity(f_kernel, obs)\nLikelihoodDensity(f_kernel, 1.5)\n\njulia> DensityKind(likelihood)\nIsDensity()\n\njulia> logdensityof(likelihood, x) == logdensityof(f_kernel(x), obs)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Test-utility","page":"API","title":"Test utility","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"DensityInterface.test_density_interface","category":"page"},{"location":"api/#DensityInterface.test_density_interface","page":"API","title":"DensityInterface.test_density_interface","text":"DensityInterface.test_density_interface(object, x, ref_logd_at_x; kwargs...)\n\nTest that object is compatible with DensityInterface.\n\nTests that either DensityKind(object) isa IsOrHasDensity.\n\nAlso tests that logdensityof(object, x) equals ref_logd_at_x and that the behavior of logdensityof(object), densityof(object, x) and densityof(object) is consistent.\n\nThe results of logdensityof(object, x) and densityof(object, x) are compared to ref_logd_at_x and exp(ref_logd_at_x) using isapprox. kwargs... are forwarded to isapprox.\n\nAlso tests that d = logfuncdensity(logdensityof(object)) returns a density (DensityKind(d) == IsDensity()) that is equivalent to object in respect to logdensityof and densityof, and that funcdensity(densityof(object)) behaves the same way.\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#DensityInterface.jl","page":"Home","title":"DensityInterface.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    struct SomeDensity end\n    log_of_d_at(x) = x^2\n    x = 4\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"DensityInterface","category":"page"},{"location":"#DensityInterface","page":"Home","title":"DensityInterface","text":"DensityInterface\n\nTrait-based interface for mathematical/statistical densities and objects associated with a density.\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"This package defines an interface for mathematical/statistical densities and objects associated with a density in Julia. The interface comprises the type DensityKind and the functions logdensityof/densityof[1] and logfuncdensity/funcdensity.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following methods must be provided to make a type (e.g. SomeDensity) compatible with the interface:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import DensityInterface\n\n@inline DensityInterface.DensityKind(::SomeDensity) = IsDensity()\nDensityInterface.logdensityof(object::SomeDensity, x) = log_of_d_at(x)\n\nobject = SomeDensity()\nDensityInterface.logdensityof(object, x) isa Real\n\n# output\n\ntrue","category":"page"},{"location":"","page":"Home","title":"Home","text":"object may be/represent a density itself (DensityKind(object) === IsDensity()) or it may be something that can be said to have a density (DensityKind(object) === HasDensity())[2].","category":"page"},{"location":"","page":"Home","title":"Home","text":"In statistical inference applications, for example, object might be a likelihood, prior or posterior.","category":"page"},{"location":"","page":"Home","title":"Home","text":"DensityInterface automatically provides logdensityof(object), equivalent to x -> logdensityof(object, x). This constitutes a convenient way of passing a (log-)density function to algorithms like optimizers, samplers, etc.:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DensityInterface\n\nobject = SomeDensity()\nlog_f = logdensityof(object)\nlog_f(x) == logdensityof(object, x)\n\n# output\n\ntrue","category":"page"},{"location":"","page":"Home","title":"Home","text":"SomeOptimizerPackage.maximize(logdensityof(object), x_init)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Reversely, a given log-density function log_f can be converted to a DensityInterface-compatible density object using logfuncdensity:","category":"page"},{"location":"","page":"Home","title":"Home","text":"object = logfuncdensity(log_f)\nDensityKind(object) === IsDensity() && logdensityof(object, x) == log_f(x)\n\n# output\n\ntrue","category":"page"},{"location":"","page":"Home","title":"Home","text":"[1]: The function names logdensityof and densityof were chosen to convey that the target object may either be a density or something that can be said to have a density. They also have less naming conflict potential than logdensity and esp. density (the latter already being exported by Plots.jl).","category":"page"},{"location":"","page":"Home","title":"Home","text":"[2]: The package Distributions supports DensityInterface for Distributions.Distribution.","category":"page"}]
}

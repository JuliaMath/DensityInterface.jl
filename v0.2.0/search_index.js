var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"DocTestSetup  = quote\n    using DensityInterface\nend","category":"page"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:module]","category":"page"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [DensityInterface]\nOrder = [:module, :type, :constant, :macro, :function]","category":"page"},{"location":"api/#DensityInterface.DensityInterface","page":"API","title":"DensityInterface.DensityInterface","text":"DensityInterface\n\nTrait-based interface for mathematical/statistical densities\n\n\n\n\n\n","category":"module"},{"location":"api/#DensityInterface.LogFuncDensity","page":"API","title":"DensityInterface.LogFuncDensity","text":"struct DensityInterface.LogFuncDensity{F}\n\nWraps a log-density function log_f to make it compatible with DensityInterface interface. Typically, LogFuncDensity(log_f) should not be called directly, logfuncdensity should be used instead.\n\n\n\n\n\n","category":"type"},{"location":"api/#DensityInterface.isdensitytype","page":"API","title":"DensityInterface.isdensitytype","text":"isdensitytype(type::Type)\n\nReturns true if type is compatible with the DensityInterface interface, otherwise returns false by default.\n\n\n\n\n\n","category":"function"},{"location":"api/#DensityInterface.logdensityof","page":"API","title":"DensityInterface.logdensityof","text":"logdensityof(density, x)::Real\nlogdensityof(density)\n\nComputes the logarithmic value of density at a given point x, resp. returns a function that does so:\n\nlogy = logdensityof(some_density, x)\nlogdensityof(some_density, x) == logdensityof(some_density)(x)\n\nand\n\nlog_f = logdensityof(density)\nlog_f(x) == logdensityof(density, x)\nlogfuncdensity(log_f) == density\n\nlogdensityof(density) defaults to Base.Fix1(logdensityof, density), but may be specialized for a density type. If so, logfuncdensity will typically have to be specialized for the return type of logdensityof as well.\n\nThe following identity must always hold:\n\nlogfuncdensity(logdensityof(density)) == density\n\n\n\n\n\n","category":"function"},{"location":"api/#DensityInterface.logfuncdensity","page":"API","title":"DensityInterface.logfuncdensity","text":"logfuncdensity(log_f)\n\nReturns a DensityInterface-compatible density that is defined by a given log-density function log_f:\n\ndensity = logfuncdensity(log_f)\nlogdensityof(density, x) == log_f(x)\nlogdensityof(density) == log_f\n\nlogfuncdensity(log_f) returns an instance of DensityInterface.LogFuncDensity by default, but may be specialized to return something else depending on the type of log_f). If so, logdensityof will typically have to be specialized for the return type of logfuncdensity as well.\n\nThe following identity must always hold:\n\nlogfuncdensity(logdensityof(density)) == density\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#DensityInterface.jl","page":"Home","title":"DensityInterface.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package defines an interface for mathematical/statistical densities in Julia. The interface comprises the functions isdensitytype,  logdensityof and logfuncdensity.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A the following methods must be provided to make a type (e.g. SomeDensity) compatible with the interface:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import DensityInterface\n\nDensityInterface.isdensitytype(::Type{<:SomeType}) = true\nDensityInterface.logdensityof(density::SomeDensity, x) = log_of_density_at_x","category":"page"},{"location":"","page":"Home","title":"Home","text":"DensityInterface includes a default implementation of logdensityof(density). It provides a convenient way of passing a log-density function to algorithms like optimizers, samplers, etc.:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DensityInterface\n\ndensity = SomeDensity()\nlog_f = logdensityof(density)\nlog_f(x) == logdensityof(density, x)\n\nSomeOptimizerPackage.maximize(logdensityof(density), x_init)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Reversely, a given log-density function log_f can be converted to a DensityInterface-compatible density object using logfuncdensity:","category":"page"},{"location":"","page":"Home","title":"Home","text":"density = logfuncdensity(log_f)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following must always hold true:","category":"page"},{"location":"","page":"Home","title":"Home","text":"logfuncdensity(logdensityof(density)) == density\nlogdensityof(logfuncdensity(log_f)) == log_f","category":"page"}]
}
